import { Request } from "../Model/request.model.js";
import { ApiResponse } from "../utils/ApiResponse.js";
import { uploadOnCloudinary } from "../utils/Cloudinary.js";
import { getDistrictCode } from "../utils/GetDistrictCode.js";
export async function CreateShareRequest(req, res) {
  try {
    const body = req?.body;
    console.log(body);
    console.log(JSON.parse(body.permanentAddress));
    const frontImage = req?.files?.citizenshipFrontImage[0]?.path;
    const backImage = req?.files?.citizenshipBackImage[0]?.path;
    console.log(frontImage, backImage);
    const frontImageCloudinary = await uploadOnCloudinary(frontImage);
    const backImageCloudinary = await uploadOnCloudinary(backImage);
    const newRequest = new Request({
      ...body,
      permanentAddress: JSON.parse(body.permanentAddress),
      temporaryAddress: JSON.parse(body.temporaryAddress),
      children: JSON.parse(body.children),
      citizenshipFrontImage: frontImageCloudinary.url,
      citizenshipBackImage: backImageCloudinary.url,
      totalShareAmount: JSON.parse(body.totalShareAmount),
    });
    const savedData = await newRequest.save();

    return res
      .status(200)
      .json(new ApiResponse(200, body, "Share request created"));
  } catch (error) {
    console.log(error);
    return res
      .status(500)
      .json(new ApiResponse(500, null, "Internal Server Error"));
  }
}

export async function GetShareRequest(req, res) {
  // 
  try {
    const reponse = await Request.find({
      $and: [{ isDeclined: null, isApproved: null }]
    }).sort({ _id: "desc" });
    return res
      .status(200)
      .json(
        new ApiResponse(200, reponse, "Share request generated successfullly")
      );
  } catch (error) {
    return res
      .status(500)
      .json(new ApiResponse(500, null, "Internal Server Error"));
  }
}

export async function GetShareRequestById(req, res) {
  try {
    const { id } = req.params;
    const responseById = await Request.findOne({ _id: id });
    return res
      .status(200)
      .json(new ApiResponse(200, responseById, "Request generated by Id"));
  } catch (error) {
    return res
      .status(500)
      .json(new ApiResponse(500, null, "Internal Server Error"));
  }
}

export async function updateOpenStatus(req, res) {
  try {
    const { id } = req.params;
    const response = await Request.findOneAndUpdate(
      { _id: id },
      {
        $set: {
          isOpened: true,
        },
      }
    );
    console.log(response);
    return res
      .status(200)
      .json(new ApiResponse(200, null, "Open status updated successfully"));
  } catch (error) {
    return res
      .status(500)
      .json(new ApiResponse(500, null, "Internal Server Error"));
  }
}
export async function declineRequest(req, res) {
  try {
    const { id , remarks } = req.body;
    const response = await Request.findOneAndUpdate(
      { _id: id },
      {
        $set: {
          isDeclined: true,
          remarks:remarks
        },
      }
    );
    return res
      .status(200)
      .json(new ApiResponse(200, null, "Application declined successfully"));
  } catch (error) {
    return res
      .status(500)
      .json(new ApiResponse(500, null, "Internal Server Error"));
  }
}

export async function acceptRequest(req, res) {
  try {
    const { id , shareQuantity } = req.body;
    const request = await Request.findOne({}).sort({identityNumber:-1});

    let shareNumberStart = 0;
    let shareNumberEnd = shareQuantity;

    const lastElement = await Request.findOne({isApproved:true}).sort({_id:-1});
    if(lastElement){
      shareNumberStart  = lastElement.shareNumberEnd + 1
      shareNumberEnd = shareNumberStart + (shareQuantity+1)
    }
    const response = await Request.findOneAndUpdate(
      { _id: id },
      {
        $set: {
          isApproved: true,
          shareNumberStart:shareNumberStart,
          shareNumberEnd:shareNumberEnd
        },
      }
    );
    return res
      .status(200)
      .json(new ApiResponse(200, null, "Application Accepted successfully"));
  } catch (error) {
    return res
      .status(500)
      .json(new ApiResponse(500, null, "Internal Server Error"));
  }
}


export async function getAcceptedRequest(req,res){
  try {
      const response = await Request.find({isApproved:true}).sort({_id:'desc'});
      return res.status(200).json(new ApiResponse(200,response,"Accepted Share request list generated"))
  } catch (error) {
    return res.status(500).json(new ApiResponse(500,null,"Internal Server Error"))
  }
};


export async function getDeclinedRequest(req,res){
  try {
    const response = await Request.find({isDeclined:true}).sort({_id:'desc'});
    return res.status(200).json(new ApiResponse(200,response,'Decliend Share request list generated'))
  } catch (error) {
    return res.status(500).json(new ApiResponse(500,null,"Internal Server Error"))
  }
}



export async function GenerateCertificate(req,res){
  try {
    const {id} = req.params;
    const response = await Request.findOne({_id:id})
    const districtId = response.permanentAddress?.districtId
    const code = getDistrictCode(districtId);
    const latestRequest = await Request.findOne({isApproved:true}).sort({_id:'desc'});
    console.log()
    let finalCode = `${code}-0001`;
    if(latestRequest){
      const latestNumber = parseInt(latestRequest.shareCertificateNumber.split('-')[1],10);
      finalCode = code+"-"+(latestNumber+1).toString().padStart(4, "0");
    };
    const finalResponse = await Request.findOneAndUpdate({_id:id},{
      $set:{
        shareCertificateNumber:finalCode
      }
    },{new:true})
    return res.status(200).json(new ApiResponse(200,finalResponse,"Certificate generated"))

  } catch (error) {
    console.log(error)
    return res.status(500).json(new ApiResponse(500,null,"Internal Server Error"))
  }
}